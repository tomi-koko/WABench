import time

def now_sec():
    return time.monotonic()

def simple_compress(data):
    out = bytearray()
    i = 0
    while i < len(data):
        b = data[i]
        count = 1
        while i + count < len(data) and data[i + count] == b and count < 255:
            count += 1
        out.append(count)
        out.append(b)
        i += count
    return out

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <file>")
        sys.exit(1)

    with open(sys.argv[1], "rb") as f:
        input_data = f.read()

    t_start = now_sec()
    output_data = simple_compress(input_data)
    t_end = now_sec()

    print(f"Compression time: {t_end - t_start:.6f} sec")
    print(f"Original size: {len(input_data)} bytes")
    print(f"Compressed size: {len(output_data)} bytes")
    const std = @import("std");

fn nowSec() f64 {
    return @as(f64, @floatFromInt(std.time.microTimestamp())) / 1_000_000.0;
}

fn simpleCompress(allocator: std.mem.Allocator, input: []const u8) ![]u8 {
    var output = std.ArrayList(u8).init(allocator);
    defer output.deinit();
    
    var i: usize = 0;
    while (i < input.len) {
        const b = input[i];
        var count: usize = 1;
        while (i + count < input.len and input[i + count] == b and count < 255) {
            count += 1;
        }
        try output.append(@intCast(count));
        try output.append(b);
        i += count;
    }
    return output.toOwnedSlice();
}

pub fn main() !void {
    const stdout = std.io.getStdOut().writer();
    
    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
    defer arena.deinit();
    const allocator = arena.allocator();

    const args = try std.process.argsAlloc(allocator);
    defer std.process.argsFree(allocator, args);

    if (args.len != 2) {
        try stdout.print("Usage: {s} <file>\n", .{args[0]});
        std.process.exit(1);
    }

    const input_data = try std.fs.cwd().readFileAlloc(allocator, args[1], std.math.maxInt(usize));
    
    const t_start = nowSec();
    const output_data = try simpleCompress(allocator, input_data);
    const t_end = nowSec();

    try stdout.print("Compression time: {d:.6} sec\n", .{t_end - t_start});
    try stdout.print("Original size: {d} bytes\n", .{input_data.len});
    try stdout.print("Compressed size: {d} bytes\n", .{output_data.len});
}use std::time::Instant;
use std::fs;
use std::env;

fn simple_compress(input: &[u8]) -> Vec<u8> {
    let mut output = Vec::new();
    let mut i = 0;
    while i < input.len() {
        let b = input[i];
        let mut count = 1;
        while i + count < input.len() && input[i + count] == b && count < 255 {
            count += 1;
        }
        output.push(count as u8);
        output.push(b);
        i += count;
    }
    output
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() != 2 {
        eprintln!("Usage: {} <file>", args[0]);
        std::process::exit(1);
    }

    let input_data = fs::read(&args[1]).expect("Failed to read file");

    let t_start = Instant::now();
    let output_data = simple_compress(&input_data);
    let duration = t_start.elapsed();

    println!("Compression time: {:.6} sec", duration.as_secs_f64());
    println!("Original size: {} bytes", input_data.len());
    println!("Compressed size: {} bytes", output_data.len());
}
